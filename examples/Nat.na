(Nat = { t : [zer,suc];         
        v : (case {
                zer = [tt],
                suc = this.Nat} 
             : [zer,suc] -> *) t}
,FNat = case { zer = [tt],
               suc = this.Nat} : [zer,suc] -> *
,zero = (t = 'zer, v = 'tt)
,succ = \ (n : this.Nat) -> (t = 'suc, v = n)
,plus = \n o -> (using t | this.FNat t -> this.Nat 
                 case o.t of {
                      zer = \q -> n,
                      suc = \q -> this.succ (this.plus q n)
                    }) o.v
)