star⁴ :: let i5 = *5 in i5
star⁴ = let i4 = *4 in i4

star³ :: star⁴
star³ = let i3 = *3 in i3

star² :: star³
star² = let i2 = *2 in i2

star :: star²
star = let i = * in i

ℤ/5ℤ :: star
ℤ/5ℤ =
  let fin : star = { '0, '1, '2, '3, '4 } in fin

funℤ/5ℤ :: star²
funℤ/5ℤ = let t : star² = ( a : ℤ/5ℤ ) -> ℤ/5ℤ in t

binℤ/5ℤ :: star³
binℤ/5ℤ =
  let t : star³ = ( a : ℤ/5ℤ ) -> funℤ/5ℤ
  in t

incr :: funℤ/5ℤ
incr =
  let f : funℤ/5ℤ = λ n .
    case n {
      '0 -> let r : ℤ/5ℤ = '1 in r
      '1 -> let r : ℤ/5ℤ = '2 in r
      '2 -> let r : ℤ/5ℤ = '3 in r
      '3 -> let r : ℤ/5ℤ = '4 in r
      '4 -> let r : ℤ/5ℤ = '0 in r
    }
  in f

funT :: star³
funT =
  let t : star³ = ( _ : funℤ/5ℤ ) -> funℤ/5ℤ in t

composeIncr :: funT
composeIncr =
  let x : funT = λ f .
    let f' : funℤ/5ℤ = λ n .
      let n' = incr n in
      let n'' = f n' in
      n''
    in f'
  in x

repeatT :: star⁴
repeatT =
  let t : star⁴ = ( _ : ℤ/5ℤ ) -> funT in
  t

repeat :: repeatT
repeat =
  let f : repeatT = λ n .
    let f' : funT = λ f .
      case n {
      '0 ->
         let f' : funℤ/5ℤ = λn .
	   n
	 in f'
      '1 ->
         let f' : funℤ/5ℤ = λn .
	   let n = f n in n
	 in f'
      '2 ->
         let f' : funℤ/5ℤ = λn .
	   let n = f n in
           let n = f n in n
	 in f'
      '3 ->
         let f' : funℤ/5ℤ = λn .
	   let n = f n in
           let n = f n in
           let n = f n in n
	 in f'
      '4 ->
         let f' : funℤ/5ℤ = λn .
	   let n = f n in
           let n = f n in
 	   let n = f n in
	   let n = f n in n
	 in f'
      }
    in f'
  in f


+ :: binℤ/5ℤ
+ =
  let f1 : binℤ/5ℤ = λ n1 .
    let f2 : funℤ/5ℤ = λ n2 .
      let r = repeat n1 in
      let r' = r incr in
      let res = r' n2 in
      res
    in f2
  in f1

test :: ℤ/5ℤ
test =
  let n : ℤ/5ℤ = '3 in
  let f = + n in
  let x = f n in
  x