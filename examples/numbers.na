Numbers ::
let ℤ/3ℤ =
  { '0, '1, '2 }
in ℤ/3ℤ

Numbers =

let Unit = { 'unit } in
let Bot = { } in

let ℤ/3ℤ =
  { '0, '1, '2 }
in

let funℤ/3ℤ : * =
  ( a : ℤ/3ℤ ) -> ℤ/3ℤ
in

let binℤ/3ℤ : * =
  ( a : ℤ/3ℤ ) -> funℤ/3ℤ
in

let boolℤ/3ℤ : *2 =
  ( _ : ℤ/3ℤ ) -> * in

let binboolℤ/3ℤ : *2 =
  ( _ : ℤ/3ℤ ) -> boolℤ/3ℤ
in

let incr : funℤ/3ℤ = λ n .
  case n {
    '0 -> let r : ℤ/3ℤ = '1 in r
    '1 -> let r : ℤ/3ℤ = '2 in r
    '2 -> let r : ℤ/3ℤ = '0 in r
  }
in

let funT : * =
  ( _ : funℤ/3ℤ ) -> funℤ/3ℤ
in

let composeIncr : funT = λ f .
  let f' : funℤ/3ℤ = λ n .
    let n' = incr n in
    let n'' = f n' in
    n''
  in f'
in

let repeatT : * = ( _ : ℤ/3ℤ ) -> funT in

let repeat : repeatT = λ n .
  let f' : funT = λ f .
    case n {
    '0 ->
       let f' : funℤ/3ℤ = λn . n
       in f'
    '1 ->
       let f' : funℤ/3ℤ = λn .
         let n = f n in n
       in f'
    '2 ->
       let f' : funℤ/3ℤ = λn .
         let n = f n in
         let n = f n in n
       in f'
    }
  in f'
in

let + : binℤ/3ℤ = λ n1 .
  let f2 : funℤ/3ℤ = λ n2 .
    let r = repeat n1 in
    let r' = r incr in
    let res = r' n2 in
    res
  in f2
in

let == : binboolℤ/3ℤ = λ n1 .
  let f2 : boolℤ/3ℤ = λ n2 .
    case n1 {
      '0 ->
      case n2 {
        '0 -> Unit
        '1 -> Bot
        '2 -> Bot
      }
      '1 ->
      case n2 {
        '0 -> Bot
        '1 -> Unit
        '2 -> Bot
      }
      '2 ->
      case n2 {
        '0 -> Bot
        '1 -> Bot
        '2 -> Unit
      }
    }
  in f2
in

let n : ℤ/3ℤ = '2 in
let f = + n in
let x = f n in
x
