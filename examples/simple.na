star³ :: let i4 = *4 in i4
star³ = let i3 = *3 in i3

star² :: star³
star² = let i2 = *2 in i2

star :: star²
star = let i = * in i

voidfin :: star
voidfin =
  let fin : star = { 'bla } in fin

pairdep :: star²
pairdep =
  let p : star² = ( x : star ) * x in p

sig_pairing :: star³
sig_pairing =
  let i : star³ = ( _ : star) -> star²
  in i

pairing :: sig_pairing
pairing =
  let f : sig_pairing = λ x .
    let r : star² = ( _ : x ) × x in r
  in f

voidpair :: star²
voidpair =
  let fin : star = { 'blu, 'bli } in
  let pair : star² = (x:fin) × voidfin in
  pair

idfin :: voidfin
idfin =
  let t : voidfin = 'bla in
  case t {
    'bla -> let t : voidfin = 'bla in t
  }